#include "hGeoStructsOSL.h"

float ripple(float dist, float age, float life, float speed, float frequency){

    float f, r, attenuation;
    r = age * speed;

    f = sin(max(0, dist-r)*frequency); // frequency and speed

    f = (dist>r) ? cos((dist-r)*frequency) : (0.5 + cos( max(-M_PI,(dist-r)*frequency))*0.5);
    attenuation = 1-linearstep(r, r*2, dist);
    f *= attenuation*attenuation;
    f *= clamp((life-age)/life,0,1); // fade by time

    return f;
}

shader ripples(
    point position = 0,
    ArrayData Pos = {},
    ArrayData Age = {},
    float life = 25.0,
    float speed = 0.05,
    float frequency = 32.0,
    output float out = 0,
)
{
    int n=Pos.num;

             out += ripple(distance(Pos.v0, position), Age.v0.x, life, speed, frequency);
    if (n>1) out += ripple(distance(Pos.v1, position), Age.v1.x, life, speed, frequency);
    if (n>2) out += ripple(distance(Pos.v2, position), Age.v2.x, life, speed, frequency);
    if (n>3) out += ripple(distance(Pos.v3, position), Age.v3.x, life, speed, frequency);
    if (n>4) out += ripple(distance(Pos.v4, position), Age.v4.x, life, speed, frequency);
    if (n>5) out += ripple(distance(Pos.v5, position), Age.v5.x, life, speed, frequency);
    if (n>6) out += ripple(distance(Pos.v6, position), Age.v6.x, life, speed, frequency);
    if (n>7) out += ripple(distance(Pos.v7, position), Age.v7.x, life, speed, frequency);
}
