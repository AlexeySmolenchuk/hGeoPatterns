shader sampleTextures(
    string file = "" [[
        string widget = "assetIdInput",
        string label = "Filename",
        string options = "texture",
        int connectable = 0,
        ]],
    float filter = 1.0 [[
        string label = "Filter Width",
        int connectable = 0,
        ]],
    float gamma = 1.0 [[
        string label = "Blending Contrast",
        int connectable = 0,
        ]],
    vector coords[] = {},
    vector randoms[] = {},
    float weights[] = {},
    output color out = 0,
    output float masks[8] = {},
    output color DBG = 0,
)
{
    float sum = 0;

    for (int n = 0; n < 8; n++){
        vector uv = coords[n];
        if (weights[n] > 0.0){

            // force tiling
            uv.x = uv.x - floor(uv.x);
            uv.y = uv.y - floor(uv.y);

            vector temp = pow(texture(file, uv.x, 1.0-uv.y, "width", filter)/0.18, gamma) * weights[n];
            masks[n] = temp.x;
            sum += temp.x;
            out += temp;
            DBG += randoms[n] * weights[n];
        }
    }

    out = pow(out, 1.0/gamma)*0.18;
    
    float inv = 1.0/sum;

    for (int i = 0; i < 8; i++){
        masks[i]  *= inv;
    }
}
